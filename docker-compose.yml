version: '3.4'

services:
  catalog-service:
    build:
      context: .
      dockerfile: ./apps/catalog-service/docker/build-app/Dockerfile
    environment:
      - EVENT_BUS_CONNECTION=amqp://rabbitmq:5672
    ports:
      - '3000:3000'
    depends_on:
      - postgres
      - rabbitmq
      - catalog-db-migrate

  ordering-service:
    build:
      context: .
      dockerfile: ./apps/ordering-service/docker/build-app/Dockerfile
    environment:
      - EVENT_BUS_CONNECTION=amqp://rabbitmq:5672
    ports:
      - '3001:3000'
    depends_on:
      - postgres
      - rabbitmq
      - ordering-db-migrate

  identity-service:
    container_name: keycloak
    image: jboss/keycloak
    env_file: .env
    ports:
      - '4000:8080'
    environment:
      - DB_VENDOR=postgres
      - DB_ADDR=postgres:5432
      - DB_DATABASE=${PG_IDENTITY_DB}
      - DB_USER=${PG_IDENTITY_USER}
      - DB_PASSWORD=${PG_IDENTITY_PASSWORD}
      - KEYCLOAK_USER=${KEYCLOAK_USER}
      - KEYCLOAK_PASSWORD=${KEYCLOAK_PASSWORD}
    depends_on:
      - postgres

  basket-service:
    build:
      context: .
      dockerfile: ./apps/basket-service/docker/build-app/Dockerfile
    environment:
      - EVENT_BUS_CONNECTION=amqp://rabbitmq:5672
    ports:
      - '3003:3000'
    depends_on:
      - postgres
      - rabbitmq
      - basket-db-migrate
  
  web-shopping-bff:
    build:
      context: .
      dockerfile: ./apps/web-shopping-bff/docker/build-app/Dockerfile
    environment:
      - KEYKLOAK_FRONTEND_HOST=localhost:4000
      - RESOURCE_SERVER_URL=http://identity-service:8080/auth/realms/e-shop-on-containers
      - WEB_SHOPPING_URL=http://localhost:4200
      - BASKET_URL=http://basket-service:3000
      - CATALOG_URL=http://catalog-service:3000
      - ORDERING_URL=http://ordering-service:3000
    ports:
      - '3004:3000'
    depends_on:
      - basket-service

  postgres:
    container_name: postgres
    image: denlysenko/postgres-multi
    env_file: .env
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USERS=${PG_CATALOG_USER}:${PG_CATALOG_PASSWORD}|${PG_ORDERING_USER}:${PG_ORDERING_PASSWORD}|${PG_IDENTITY_USER}:${PG_IDENTITY_PASSWORD}|${PG_MARKETING_USER}:${PG_MARKETING_PASSWORD}|${PG_WEBHOOKS_USER}:${PG_WEBHOOKS_PASSWORD}|${PG_BASKET_USER}:${PG_BASKET_PASSWORD}
      - POSTGRES_DATABASES=${PG_CATALOG_DB}:${PG_CATALOG_USER}|${PG_ORDERING_DB}:${PG_ORDERING_USER}|${PG_IDENTITY_DB}:${PG_IDENTITY_USER}|${PG_MARKETING_DB}:${PG_MARKETING_USER}|${PG_WEBHOOKS_DB}:${PG_WEBHOOKS_USER}|${PG_BASKET_DB}:${PG_BASKET_USER}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    ports:
      - '15672:15672'
      - '5672:5672'

  catalog-db-migrate:
    build:
      context: .
      dockerfile: ./apps/catalog-service/docker/run-migrations/Dockerfile
    env_file: .env
    command:
      [
        './wait-for-it/wait-for-it.sh',
        'postgres:5432',
        '--',
        '/bin/bash',
        '-c',
        'typeorm migration:run --config ./orm-docker.config.js',
      ]
    depends_on:
      - postgres

  ordering-db-migrate:
    build:
      context: .
      dockerfile: ./apps/ordering-service/docker/run-migrations/Dockerfile
    env_file: .env
    command:
      [
        './wait-for-it/wait-for-it.sh',
        'postgres:5432',
        '--',
        '/bin/bash',
        '-c',
        'typeorm migration:run --config ./orm-docker.config.js',
      ]
    depends_on:
      - postgres
  
  basket-db-migrate:
    build:
      context: .
      dockerfile: ./apps/basket-service/docker/run-migrations/Dockerfile
    env_file: .env
    command:
      [
        './wait-for-it/wait-for-it.sh',
        'postgres:5432',
        '--',
        '/bin/bash',
        '-c',
        'typeorm migration:run --config ./orm-docker.config.js',
      ]
    depends_on:
      - postgres

volumes:
  postgres_data:
    external: false
